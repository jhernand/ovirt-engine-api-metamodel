/*
 * Copyright oVirt Authors
 * SPDX-License-Identifier: Apache-2.0
 */

package org.ovirt.api.metamodel.concepts;

import java.io.Serializable;

import org.ovirt.api.metamodel.concepts.Type;

/**
 * Base class for the different types of expressions.
 */
public abstract class Expression implements Serializable {
    // The type of the values generated by the expression:
    private Type type;

    /**
     * Returns the type of the values of the expression.
     */
    public Type getType() {
        return type;
    }

    /**
     * Sets the type of the values of the expression.
     */
    public void setType(Type newType) {
        type = newType;
    }

    /**
     * The boolean flag indicates if the result should be protected using parenthesis. The implementation may decide
     * to ignore this. For example, a literal expression like {@code 23} can ignore it, as it will never need
     * parenthesis to protect it.
     */
    public abstract String toString(boolean protect);

    /**
     * Generates the string representation of the string, assuming that it is going to be used in a place that doesn't
     * require parenthesis. If this isn't the case consider using the {@link #toString(boolean)} method, passing the
     * {@code true} as the value of the {@code protect} parameter.
     */
    @Override
    public String toString() {
        return toString(false);
    }
}
